"use strict";(self.webpackChunkzerodoc=self.webpackChunkzerodoc||[]).push([[2602],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(t),m=a,f=l["".concat(i,".").concat(m)]||l[m]||u[m]||s;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<s;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},50683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));t(79524);const s={},o="\u7f51\u6613\u4e91\u52a0\u5bc6\u53c2\u6570\u5206\u6790",c={unversionedId:"rsecu/webjs/3_23",id:"rsecu/webjs/3_23",title:"\u7f51\u6613\u4e91\u52a0\u5bc6\u53c2\u6570\u5206\u6790",description:"- \u641c\u7d22encSecKey\uff0c\u5b9a\u4f4d\u5230core_163eeace71d519554a5fb05513b6ef91.js",source:"@site/docs/rsecu/webjs/3_23.mdx",sourceDirName:"rsecu/webjs",slug:"/rsecu/webjs/3_23",permalink:"/zerodoc/docs/rsecu/webjs/3_23",draft:!1,tags:[],version:"current",frontMatter:{}},i={},p=[{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}],d={toc:p},l="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u7f51\u6613\u4e91\u52a0\u5bc6\u53c2\u6570\u5206\u6790"},"\u7f51\u6613\u4e91\u52a0\u5bc6\u53c2\u6570\u5206\u6790"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u641c\u7d22encSecKey\uff0c\u5b9a\u4f4d\u5230core_163eeace71d519554a5fb05513b6ef91.js"),(0,a.kt)("li",{parentName:"ul"},"params 2\u6b21aes\u52a0\u5bc6  encSecKey rsa\u52a0\u5bc6")),(0,a.kt)("p",null,"\u7f51\u4e0a\u6709\u6bd4\u8f83\u8be6\u7ec6\u7684\u53ef\u4ee5\u53c2\u8003"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://blog.csdn.net/weixin_50847719/article/details/115269122?spm=1001.2014.3001.5501"},"https://blog.csdn.net/weixin_50847719/article/details/115269122?spm=1001.2014.3001.5501")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.pianshen.com/article/594253414/"},"https://www.pianshen.com/article/594253414/")),(0,a.kt)("h2",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import binascii\nimport json\nimport random\nimport base64\n\nimport requests\nfrom Crypto.Cipher import AES\n\n\ndef random_b():\n    seed = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"\n    sa = []\n    for i in range(16):\n        sa.append(random.choice(seed))\n    salt = \'\'.join(sa)\n    return bytes(salt, \'utf-8\')\n\n\n# \u7b2c\u4e8c\u53c2\u6570\uff0crsa\u516c\u5319\u7ec4\u6210\npub_key = "010001"\n# \u7b2c\u4e09\u53c2\u6570\uff0crsa\u516c\u5319\u7ec4\u6210\nmodulus = "00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7"\n# \u7b2c\u56db\u53c2\u6570\uff0caes\u5bc6\u5319\nsecret_key = b\'0CoJUm6Qyw8W8jud\'\n\n"""\nAES \u52a0\u5bc6\n"""\n\n\ndef aes_encrypt(text, key):\n    # \u504f\u79fb\u91cf\n    iv = b\'0102030405060708\'\n    # \u5bf9\u957f\u5ea6\u4e0d\u662f16\u500d\u6570\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u8865\u5168\uff0c\u7136\u540e\u5728\u8f6c\u4e3abytes\u6570\u636e\n    pad = 16 - len(text) % 16\n    try:\n        # \u5982\u679c\u63a5\u5230bytes\u6570\u636e\uff08\u5982\u7b2c\u4e00\u6b21aes\u52a0\u5bc6\u5f97\u5230\u7684\u5bc6\u6587\uff09\u8981\u89e3\u7801\u518d\u8fdb\u884c\u8865\u5168\n        text = text.decode()\n    except:\n        pass\n    text = text + pad * chr(pad)\n    try:\n        text = text.encode()\n    except:\n        pass\n    encryptor = AES.new(key, AES.MODE_CBC, iv)\n    ciphertext = encryptor.encrypt(text)\n    ciphertext = base64.b64encode(ciphertext).decode(\'utf-8\')  # \u5f97\u5230\u7684\u5bc6\u6587\u8fd8\u8981\u8fdb\u884cbase64\u7f16\u7801\n    return ciphertext\n\n\n"""\nRSA \u52a0\u5bc6\n"""\n\n\ndef rsa_encrypt(random_char):\n    text = random_char[::-1]  # \u660e\u6587\u5904\u7406\uff0c\u53cd\u5e8f\u5e76hex\u7f16\u7801\n    rsa = int(binascii.hexlify(text), 16) ** int(pub_key, 16) % int(modulus, 16)\n    return format(rsa, \'x\').zfill(256)\n\n\n"""\n\u6784\u9020params\n"""\n\n\ndef aes_param(data):\n    text = json.dumps(data)\n    random_char = random_b()\n    params = aes_encrypt(text, secret_key)  # \u4e24\u6b21aes\u52a0\u5bc6\n    params = aes_encrypt(params, random_char)\n    enc_sec_key = rsa_encrypt(random_char)\n    data = {\n        \'params\': params,\n        \'encSecKey\': enc_sec_key\n    }\n    return data\n\n\n"""\n\u8bf7\u6c42\u5934\n\u5728\u8fd9\u91cc\u4e0d\u80fd\u5c06Referer\u56fa\u5b9a\u5199\u6b7b\n\u56e0\u4e3a\u5728\u641c\u7d22\u6b4c\u66f2\u7684\u65f6\u5019\u8bf7\u6c42\u7684Referer\u4e3a\uff1ahttps://music.163.com/search/\n\u800c\u67e5\u770b\u6b4c\u8bcd\u7684\u65f6\u5019\u8bf7\u6c42\u7684Referer\u4e3a\uff1a\'https://music.163.com/song?id=\u6b4c\u66f2id\n"""\nheaders = {\n    \'Connection\': \'keep-alive\',\n    \'User-Agent\': \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\',\n    \'Host\': \'music.163.com\',\n    \'Origin\': \'https://music.163.com\',\n}\n\n"""\n\u901a\u8fc7\u6b4c\u66f2id\u722c\u6b4c\u8bcd\u5185\u5bb9\n"""\n\n\ndef find_song_word(song_id):\n    referer = \'https://music.163.com/song?id=\' + song_id\n    headers[\'Referer\'] = referer\n    url = \'https://music.163.com/weapi/song/lyric?csrf_token=\'\n    param = {"id": song_id, "lv": -1, "tv": -1, "csrf_token": ""}\n    data = aes_param(param)\n    result = requests.post(url, data=data, headers=headers)\n    result = result.json()\n    return result[\'lrc\'][\'lyric\']\n\n\nif __name__ == \'__main__\':\n    # \u641c\u7d22\u6b4c\u66f2url\n    query_url = \'https://music.163.com/weapi/cloudsearch/get/web?csrf_token=\'\n    data = {"hlpretag": "<span class=\\"s-fc7\\">",\n            "hlposttag": "</span>",\n            "s": "\u4e03\u53d4",\n            "type": "1",\n            "offset": "0",\n            "total": "true",\n            "limit": "30",\n            "csrf_token": ""\n            }\n    data = aes_param(data)\n    referer = \'https://music.163.com/search/\'\n    headers[\'Referer\'] = referer\n    result = requests.post(query_url, data=data, headers=headers)\n    result = result.json()\n    songs = result[\'result\'][\'songs\']\n    output = []\n    for i in songs:\n        songer = []\n        # \u6b4c\u66f2id\n        song_id = i[\'id\']\n        # \u6b4c\u8bcd\n        song_content = find_song_word(str(song_id))\n        # \u6b4c\u66f2\u540d\n        song_name = i[\'name\']\n        song_arr = i[\'ar\']\n        # \u4e00\u9996\u6b4c\u53ef\u80fd\u591a\u4eba\u5531, \u662f\u4e2a\u5217\u8868 \u9700\u8981\u904d\u5386\n        for k in song_arr:\n            song_dict = {\'id\': k[\'id\'], \'name\': k[\'name\']}\n            songer.append(song_dict)\n            output.append({\'song_id\': song_id, \'name\': song_name, \'songer\': songer, \'content\': song_content})\n    print(json.dumps(output, ensure_ascii=False))\n\n')))}u.isMDXComponent=!0}}]);